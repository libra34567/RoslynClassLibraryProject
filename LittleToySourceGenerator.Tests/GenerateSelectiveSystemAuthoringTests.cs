namespace LittleToySourceGenerator.Tests;

using Microsoft.CodeAnalysis;
using Microsoft.VisualStudio.TestTools.UnitTesting;

[TestClass]
public class GenerateSelectiveSystemAuthoringTests : CodeGenerationTestBase
{
    [TestMethod]
    public void ServerWorldSelectiveSystemAuthoring()
    {
        string source = @"
using Plugins.baseGame;
using Unity.Entities;
using DOTSNET;

[DisableAutoCreation]
[ServerWorld]
[GenerateSystemAuthoring]
public partial class SampleSystem : SystemBase
{
    [FieldFromAuthoring(SourceType.SerializePrivate)]
    public int Value;
    [FieldFromAuthoring(SourceType.Public)]
    public int AnotherValue;
    [FieldFromAuthoring(SourceType.Inject)]
    public GameManager GameManager;
}

public class GameManager {}
";
        var generator = new Generator();
        generator.DisableAllGeneration();
        generator.EnableSelectiveSystemAuthoringGeneration = true;
        string output = this.GetGeneratedOutput(source, generator, NullableContextOptions.Disable);

        Assert.IsNotNull(output);

        var expectedOutput = @"// <auto-generated>
// Code generated by LittleToy Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>
#nullable enable
#pragma warning disable 1591
using DOTSNET;
using UnityEngine;
using Zenject;

public partial class SampleSystemServerAuthoring : MonoBehaviour, SelectiveSystemAuthoring
{
    [SerializeField]
    private int value;
    public int anotherValue;
    [Inject]
    private GameManager gameManager;

    public SampleSystem System
    {
        get => Bootstrap.ServerWorld.GetExistingSystem<SampleSystem>();
    }

    public System.Type GetSystemType()
    {
        return typeof(SampleSystem);
    }

    private void Awake()
    {
        var system = System;
        system.Value = value;
        system.AnotherValue = anotherValue;
        system.GameManager = gameManager;
    }
}
";
        Assert.AreEqual(expectedOutput, output);
    }

    [TestMethod]
    public void ClientWorldSelectiveSystemAuthoring()
    {
        string source = @"
using Plugins.baseGame;
using Unity.Entities;
using DOTSNET;

[DisableAutoCreation]
[ClientWorld]
[GenerateSystemAuthoring]
public partial class SampleSystem : SystemBase
{
    [FieldFromAuthoring(SourceType.SerializePrivate)]
    public int Value;
    [FieldFromAuthoring(SourceType.Public)]
    public int AnotherValue;
    [FieldFromAuthoring(SourceType.Inject)]
    public GameManager GameManager;
}

public class GameManager {}
";
        var generator = new Generator();
        generator.DisableAllGeneration();
        generator.EnableSelectiveSystemAuthoringGeneration = true;
        string output = this.GetGeneratedOutput(source, generator, NullableContextOptions.Disable);

        Assert.IsNotNull(output);

        var expectedOutput = @"// <auto-generated>
// Code generated by LittleToy Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>
#nullable enable
#pragma warning disable 1591
using DOTSNET;
using UnityEngine;
using Zenject;

public partial class SampleSystemClientAuthoring : MonoBehaviour, SelectiveSystemAuthoring
{
    [SerializeField]
    private int value;
    public int anotherValue;
    [Inject]
    private GameManager gameManager;

    public SampleSystem System
    {
        get => Bootstrap.ClientWorld.GetExistingSystem<SampleSystem>();
    }

    public System.Type GetSystemType()
    {
        return typeof(SampleSystem);
    }

    private void Awake()
    {
        var system = System;
        system.Value = value;
        system.AnotherValue = anotherValue;
        system.GameManager = gameManager;
    }
}
";
        Assert.AreEqual(expectedOutput, output);
    }

    [TestMethod]
    public void ServerAndClientWorldSelectiveSystemAuthoring()
    {
        string source = @"
using Plugins.baseGame;
using Unity.Entities;
using DOTSNET;

[DisableAutoCreation]
[ServerWorld, ClientWorld]
[GenerateSystemAuthoring]
public partial class SampleSystem : SystemBase
{
    [FieldFromAuthoring(SourceType.SerializePrivate)]
    public int Value;
    [FieldFromAuthoring(SourceType.Public)]
    public int AnotherValue;
    [FieldFromAuthoring(SourceType.Inject)]
    public GameManager GameManager;
}

public class GameManager {}
";
        var generator = new Generator();
        generator.DisableAllGeneration();
        generator.EnableSelectiveSystemAuthoringGeneration = true;
        string output = this.GetGeneratedOutput(source, generator, NullableContextOptions.Disable);

        Assert.IsNotNull(output);

        var expectedOutput = @"// <auto-generated>
// Code generated by LittleToy Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>
#nullable enable
#pragma warning disable 1591
using DOTSNET;
using UnityEngine;
using Zenject;

public partial class SampleSystemServerAuthoring : MonoBehaviour, SelectiveSystemAuthoring
{
    [SerializeField]
    private int value;
    public int anotherValue;
    [Inject]
    private GameManager gameManager;

    public SampleSystem System
    {
        get => Bootstrap.ServerWorld.GetExistingSystem<SampleSystem>();
    }

    public System.Type GetSystemType()
    {
        return typeof(SampleSystem);
    }

    private void Awake()
    {
        var system = System;
        system.Value = value;
        system.AnotherValue = anotherValue;
        system.GameManager = gameManager;
    }
}

public partial class SampleSystemClientAuthoring : MonoBehaviour, SelectiveSystemAuthoring
{
    [SerializeField]
    private int value;
    public int anotherValue;
    [Inject]
    private GameManager gameManager;

    public SampleSystem System
    {
        get => Bootstrap.ClientWorld.GetExistingSystem<SampleSystem>();
    }

    public System.Type GetSystemType()
    {
        return typeof(SampleSystem);
    }

    private void Awake()
    {
        var system = System;
        system.Value = value;
        system.AnotherValue = anotherValue;
        system.GameManager = gameManager;
    }
}
";
        Assert.AreEqual(expectedOutput, output);
    }

    [TestMethod]
    public void SpecifyNamespace()
    {
        string source = @"
using Plugins.baseGame;
using Unity.Entities;
using DOTSNET;

namespace My.InternalNamespace
{
    using OtherNamespace.Core;

    [DisableAutoCreation]
    [ClientWorld]
    [GenerateSystemAuthoring]
    public partial class SampleSystem : SystemBase
    {
        [FieldFromAuthoring(SourceType.SerializePrivate)]
        public int Value;
        [FieldFromAuthoring(SourceType.Public)]
        public int AnotherValue;
        [FieldFromAuthoring(SourceType.Inject)]
        public GameManager GameManager;
    }
}

namespace OtherNamespace.Core
{
    public class GameManager {}
}
";
        var generator = new Generator();
        generator.DisableAllGeneration();
        generator.EnableSelectiveSystemAuthoringGeneration = true;
        string output = this.GetGeneratedOutput(source, generator, NullableContextOptions.Disable);

        Assert.IsNotNull(output);

        var expectedOutput = @"// <auto-generated>
// Code generated by LittleToy Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>
#nullable enable
#pragma warning disable 1591
using DOTSNET;
using UnityEngine;
using Zenject;

namespace My.InternalNamespace
{

    public partial class SampleSystemClientAuthoring : MonoBehaviour, SelectiveSystemAuthoring
    {
        [SerializeField]
        private int value;
        public int anotherValue;
        [Inject]
        private OtherNamespace.Core.GameManager gameManager;

        public My.InternalNamespace.SampleSystem System
        {
            get => Bootstrap.ClientWorld.GetExistingSystem<My.InternalNamespace.SampleSystem>();
        }

        public System.Type GetSystemType()
        {
            return typeof(My.InternalNamespace.SampleSystem);
        }

        private void Awake()
        {
            var system = System;
            system.Value = value;
            system.AnotherValue = anotherValue;
            system.GameManager = gameManager;
        }
    }
}
";
        Assert.AreEqual(expectedOutput, output);
    }

    [TestMethod]
    public void DisableAutoCreationRequired()
    {
        string source = @"
using Plugins.baseGame;
using Unity.Entities;
using DOTSNET;

[ClientWorld]
[GenerateSystemAuthoring]
public partial class SampleSystem : SystemBase
{
    [FieldFromAuthoring(SourceType.SerializePrivate)]
    public int Value;
    [FieldFromAuthoring(SourceType.Public)]
    public int AnotherValue;
    [FieldFromAuthoring(SourceType.Inject)]
    public GameManager GameManager;
}

public class GameManager {}
";
        var generator = new Generator();
        generator.DisableAllGeneration();
        generator.EnableSelectiveSystemAuthoringGeneration = true;
        var diagnostics = this.GetDiagnosticsFromGenerator(source, generator, NullableContextOptions.Disable);

        Assert.AreEqual(1, diagnostics.Count());
        var diagnostic = diagnostics.First();
        Assert.AreEqual("(6,1): warning LT0101: DisableAutoCreationAttribute attribute is missing on a type SampleSystem. Generation would be ignored", diagnostic.ToString());
    }

    [TestMethod]
    public void WorldAttributeRequired()
    {
        string source = @"
using Plugins.baseGame;
using Unity.Entities;
using DOTSNET;

[DisableAutoCreationAttribute]
[GenerateSystemAuthoring]
public partial class SampleSystem : SystemBase
{
    [FieldFromAuthoring(SourceType.SerializePrivate)]
    public int Value;
    [FieldFromAuthoring(SourceType.Public)]
    public int AnotherValue;
    [FieldFromAuthoring(SourceType.Inject)]
    public GameManager GameManager;
}

public class GameManager {}
";
        var generator = new Generator();
        generator.DisableAllGeneration();
        generator.EnableSelectiveSystemAuthoringGeneration = true;
        var diagnostics = this.GetDiagnosticsFromGenerator(source, generator, NullableContextOptions.Disable);

        Assert.AreEqual(1, diagnostics.Count());
        var diagnostic = diagnostics.First();
        Assert.AreEqual("(6,1): warning LT0102: At least one of attributes ServerWorld or ClientWorld should be applied to type SampleSystem. Generation would be ignored", diagnostic.ToString());
    }
}
