namespace LittleToySourceGenerator.Tests;

using Microsoft.CodeAnalysis;
using Microsoft.VisualStudio.TestTools.UnitTesting;

[TestClass]
public class GenerateNetMessageTests : CodeGenerationTestBase
{
    [TestMethod]
    public void NetMessageGeneration()
    {
        string source = @"
using Plugins.basegame.Events;
using Unity.Collections;

[CodeGenNetMessage]
public partial struct JoinWorldMessage
{
    public long PlayerId;

    public int PlayerHatIndex;
    public int PlayerBodyIndex;
    public FixedString64Bytes PlayerName;
}
";
        var generator = new Generator();
        generator.DisableAllGeneration();
        generator.EnableNetMessageGeneration = true;
        string output = this.GetGeneratedOutput(source, generator, NullableContextOptions.Disable);

        Assert.IsNotNull(output);

        var expectedOutput = @"// <auto-generated>
// Code generated by LittleToy Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>
#nullable enable
#pragma warning disable 1591
using DOTSNET;
using Unity.Collections;
using System;

public partial struct JoinWorldMessage : NetworkMessage
{
        public JoinWorldMessage(Int64 playerId, Int32 playerHatIndex, Int32 playerBodyIndex, FixedString64Bytes playerName)
        {
            this.PlayerId = playerId;
            this.PlayerHatIndex = playerHatIndex;
            this.PlayerBodyIndex = playerBodyIndex;
            this.PlayerName = playerName;
        }


    public bool Serialize(ref NetworkWriter writer)
    {
        return
        writer.WriteLong(this.PlayerId) &&
        writer.WriteInt(this.PlayerHatIndex) &&
        writer.WriteInt(this.PlayerBodyIndex) &&
        writer.WriteFixedString64(this.PlayerName);
    }

    public bool Deserialize(ref NetworkReader reader)
    {
        long playerId = default;
        int playerHatIndex = default;
        int playerBodyIndex = default;
        Unity.Collections.FixedString64Bytes playerName = default;
        var result =
        reader.ReadLong(out playerId) &&
        reader.ReadInt(out playerHatIndex) &&
        reader.ReadInt(out playerBodyIndex) &&
        reader.ReadFixedString64(out playerName);
        if (!result) return false;
        this.PlayerId = playerId;
        this.PlayerHatIndex = playerHatIndex;
        this.PlayerBodyIndex = playerBodyIndex;
        this.PlayerName = playerName;
        return true;
    }
}
";
        Assert.AreEqual(expectedOutput, output);
    }
    [TestMethod]
    public void NetMessageGenerationFromProperties()
    {
        string source = @"
using Plugins.basegame.Events;
using Unity.Collections;

[CodeGenNetMessage]
public partial struct JoinWorldMessage
{
    public long PlayerId { get; set; }

    public int PlayerHatIndex { get; set; }
    public int PlayerBodyIndex { get; set; }
    public FixedString64Bytes PlayerName { get; set; }
}
";
        var generator = new Generator();
        generator.DisableAllGeneration();
        generator.EnableNetMessageGeneration = true;
        string output = this.GetGeneratedOutput(source, generator, NullableContextOptions.Disable);

        Assert.IsNotNull(output);

        var expectedOutput = @"// <auto-generated>
// Code generated by LittleToy Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>
#nullable enable
#pragma warning disable 1591
using DOTSNET;
using Unity.Collections;
using System;

public partial struct JoinWorldMessage : NetworkMessage
{
        public JoinWorldMessage(Int64 playerId, Int32 playerHatIndex, Int32 playerBodyIndex, FixedString64Bytes playerName)
        {
            this.PlayerId = playerId;
            this.PlayerHatIndex = playerHatIndex;
            this.PlayerBodyIndex = playerBodyIndex;
            this.PlayerName = playerName;
        }


    public bool Serialize(ref NetworkWriter writer)
    {
        return
        writer.WriteLong(this.PlayerId) &&
        writer.WriteInt(this.PlayerHatIndex) &&
        writer.WriteInt(this.PlayerBodyIndex) &&
        writer.WriteFixedString64(this.PlayerName);
    }

    public bool Deserialize(ref NetworkReader reader)
    {
        long playerId = default;
        int playerHatIndex = default;
        int playerBodyIndex = default;
        Unity.Collections.FixedString64Bytes playerName = default;
        var result =
        reader.ReadLong(out playerId) &&
        reader.ReadInt(out playerHatIndex) &&
        reader.ReadInt(out playerBodyIndex) &&
        reader.ReadFixedString64(out playerName);
        if (!result) return false;
        this.PlayerId = playerId;
        this.PlayerHatIndex = playerHatIndex;
        this.PlayerBodyIndex = playerBodyIndex;
        this.PlayerName = playerName;
        return true;
    }
}
";
        Assert.AreEqual(expectedOutput, output);
    }
    [TestMethod]
    public void EnumField()
    {
        string source = @"
using Plugins.basegame.Events;
using Unity.Collections;

public enum PlayerKind
{
    AI,
    Human,
}

[CodeGenNetMessage]
public partial struct JoinWorldMessage
{
    public long PlayerId;

    public int PlayerHatIndex;
    public int PlayerBodyIndex;
    public PlayerKind PlayerKind;
    public FixedString64Bytes PlayerName;
}
";
        var generator = new Generator();
        generator.DisableAllGeneration();
        generator.EnableNetMessageGeneration = true;
        string output = this.GetGeneratedOutput(source, generator, NullableContextOptions.Disable);

        Assert.IsNotNull(output);

        var expectedOutput = @"// <auto-generated>
// Code generated by LittleToy Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>
#nullable enable
#pragma warning disable 1591
using DOTSNET;
using Unity.Collections;
using System;

public partial struct JoinWorldMessage : NetworkMessage
{
        public JoinWorldMessage(Int64 playerId, Int32 playerHatIndex, Int32 playerBodyIndex, PlayerKind playerKind, FixedString64Bytes playerName)
        {
            this.PlayerId = playerId;
            this.PlayerHatIndex = playerHatIndex;
            this.PlayerBodyIndex = playerBodyIndex;
            this.PlayerKind = playerKind;
            this.PlayerName = playerName;
        }


    public bool Serialize(ref NetworkWriter writer)
    {
        return
        writer.WriteLong(this.PlayerId) &&
        writer.WriteInt(this.PlayerHatIndex) &&
        writer.WriteInt(this.PlayerBodyIndex) &&
        writer.WriteInt((int)this.PlayerKind) &&
        writer.WriteFixedString64(this.PlayerName);
    }

    public bool Deserialize(ref NetworkReader reader)
    {
        long playerId = default;
        int playerHatIndex = default;
        int playerBodyIndex = default;
        int playerKind = default;
        Unity.Collections.FixedString64Bytes playerName = default;
        var result =
        reader.ReadLong(out playerId) &&
        reader.ReadInt(out playerHatIndex) &&
        reader.ReadInt(out playerBodyIndex) &&
        reader.ReadInt(out playerKind) &&
        reader.ReadFixedString64(out playerName);
        if (!result) return false;
        this.PlayerId = playerId;
        this.PlayerHatIndex = playerHatIndex;
        this.PlayerBodyIndex = playerBodyIndex;
        this.PlayerKind = (PlayerKind)playerKind;
        this.PlayerName = playerName;
        return true;
    }
}
";
        Assert.AreEqual(expectedOutput, output);
    }
    [TestMethod]
    public void EnumFieldWithDifferentBaseType()
    {
        string source = @"
using Plugins.basegame.Events;
using Unity.Collections;

public enum PlayerKind: byte
{
    AI,
    Human,
}

[CodeGenNetMessage]
public partial struct JoinWorldMessage
{
    public long PlayerId;

    public int PlayerHatIndex;
    public int PlayerBodyIndex;
    public PlayerKind PlayerKind;
    public FixedString64Bytes PlayerName;
}
";
        var generator = new Generator();
        generator.DisableAllGeneration();
        generator.EnableNetMessageGeneration = true;
        string output = this.GetGeneratedOutput(source, generator, NullableContextOptions.Disable);

        Assert.IsNotNull(output);

        var expectedOutput = @"// <auto-generated>
// Code generated by LittleToy Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>
#nullable enable
#pragma warning disable 1591
using DOTSNET;
using Unity.Collections;
using System;

public partial struct JoinWorldMessage : NetworkMessage
{
        public JoinWorldMessage(Int64 playerId, Int32 playerHatIndex, Int32 playerBodyIndex, PlayerKind playerKind, FixedString64Bytes playerName)
        {
            this.PlayerId = playerId;
            this.PlayerHatIndex = playerHatIndex;
            this.PlayerBodyIndex = playerBodyIndex;
            this.PlayerKind = playerKind;
            this.PlayerName = playerName;
        }


    public bool Serialize(ref NetworkWriter writer)
    {
        return
        writer.WriteLong(this.PlayerId) &&
        writer.WriteInt(this.PlayerHatIndex) &&
        writer.WriteInt(this.PlayerBodyIndex) &&
        writer.WriteByte((byte)this.PlayerKind) &&
        writer.WriteFixedString64(this.PlayerName);
    }

    public bool Deserialize(ref NetworkReader reader)
    {
        long playerId = default;
        int playerHatIndex = default;
        int playerBodyIndex = default;
        byte playerKind = default;
        Unity.Collections.FixedString64Bytes playerName = default;
        var result =
        reader.ReadLong(out playerId) &&
        reader.ReadInt(out playerHatIndex) &&
        reader.ReadInt(out playerBodyIndex) &&
        reader.ReadByte(out playerKind) &&
        reader.ReadFixedString64(out playerName);
        if (!result) return false;
        this.PlayerId = playerId;
        this.PlayerHatIndex = playerHatIndex;
        this.PlayerBodyIndex = playerBodyIndex;
        this.PlayerKind = (PlayerKind)playerKind;
        this.PlayerName = playerName;
        return true;
    }
}
";
        Assert.AreEqual(expectedOutput, output);
    }

    [TestMethod]
    public void NoFields()
    {
        string source = @"
using Plugins.basegame.Events;
using Unity.Collections;

[CodeGenNetMessage]
public partial struct JoinWorldMessage
{
}
";
        var generator = new Generator();
        generator.DisableAllGeneration();
        generator.EnableNetMessageGeneration = true;
        string output = this.GetGeneratedOutput(source, generator, NullableContextOptions.Disable);

        Assert.IsNotNull(output);

        var expectedOutput = @"// <auto-generated>
// Code generated by LittleToy Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>
#nullable enable
#pragma warning disable 1591
using DOTSNET;
using Unity.Collections;
using System;

public partial struct JoinWorldMessage : NetworkMessage
{
    public bool Serialize(ref NetworkWriter writer)
    {
        return true;
    }

    public bool Deserialize(ref NetworkReader reader)
    {
        return true;
    }
}
";
        Assert.AreEqual(expectedOutput, output);
    }

    [TestMethod]
    public void NetMessageInsideNamespace()
    {
        string source = @"
using Plugins.basegame.Events;
using Unity.Collections;

namespace Test.InnerNamespace
{
    [CodeGenNetMessage]
    public partial struct JoinWorldMessage
    {
        public long PlayerId;

        public int PlayerHatIndex;
        public int PlayerBodyIndex;
        public FixedString64Bytes PlayerName;
    }
}
";
        var generator = new Generator();
        generator.DisableAllGeneration();
        generator.EnableNetMessageGeneration = true;
        string output = this.GetGeneratedOutput(source, generator, NullableContextOptions.Disable);

        Assert.IsNotNull(output);

        var expectedOutput = @"// <auto-generated>
// Code generated by LittleToy Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>
#nullable enable
#pragma warning disable 1591
using DOTSNET;
using Unity.Collections;
using System;

namespace Test.InnerNamespace
{

    public partial struct JoinWorldMessage : NetworkMessage
    {
        public JoinWorldMessage(Int64 playerId, Int32 playerHatIndex, Int32 playerBodyIndex, FixedString64Bytes playerName)
        {
            this.PlayerId = playerId;
            this.PlayerHatIndex = playerHatIndex;
            this.PlayerBodyIndex = playerBodyIndex;
            this.PlayerName = playerName;
        }


        public bool Serialize(ref NetworkWriter writer)
        {
            return
            writer.WriteLong(this.PlayerId) &&
            writer.WriteInt(this.PlayerHatIndex) &&
            writer.WriteInt(this.PlayerBodyIndex) &&
            writer.WriteFixedString64(this.PlayerName);
        }

        public bool Deserialize(ref NetworkReader reader)
        {
            long playerId = default;
            int playerHatIndex = default;
            int playerBodyIndex = default;
            Unity.Collections.FixedString64Bytes playerName = default;
            var result =
            reader.ReadLong(out playerId) &&
            reader.ReadInt(out playerHatIndex) &&
            reader.ReadInt(out playerBodyIndex) &&
            reader.ReadFixedString64(out playerName);
            if (!result) return false;
            this.PlayerId = playerId;
            this.PlayerHatIndex = playerHatIndex;
            this.PlayerBodyIndex = playerBodyIndex;
            this.PlayerName = playerName;
            return true;
        }
    }
}
";
        Assert.AreEqual(expectedOutput, output);
    }
    [TestMethod]
    public void MessageWithStruct()
    {
        string source = @"
using Plugins.basegame.Events;
using Unity.Collections;

public struct PlayerInformation
{
    public long PlayerId;

    public int PlayerHatIndex;
    public int PlayerBodyIndex { get; set; }
    public FixedString64Bytes PlayerName;
}

[CodeGenNetMessage]
public partial struct JoinWorldMessage
{
    public PlayerInformation Information;
}
";
        var generator = new Generator();
        generator.DisableAllGeneration();
        generator.EnableNetMessageGeneration = true;
        string output = this.GetGeneratedOutput(source, generator, NullableContextOptions.Disable);

        Assert.IsNotNull(output);

        var expectedOutput = @"// <auto-generated>
// Code generated by LittleToy Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>
#nullable enable
#pragma warning disable 1591
using DOTSNET;
using Unity.Collections;
using System;

public partial struct JoinWorldMessage : NetworkMessage
{
        public JoinWorldMessage(PlayerInformation information)
        {
            this.Information = information;
        }


    public bool Serialize(ref NetworkWriter writer)
    {
        return
        Serialize(ref writer, ref this.Information);
    }

    public bool Deserialize(ref NetworkReader reader)
    {
        PlayerInformation information = default;
        var result =
        Deserialize(ref reader, ref information);
        if (!result) return false;
        this.Information = information;
        return true;
    }

    public static bool Serialize(ref NetworkWriter writer, ref PlayerInformation playerInformation)
    {
        return
        writer.WriteLong(playerInformation.PlayerId) &&
        writer.WriteInt(playerInformation.PlayerHatIndex) &&
        writer.WriteFixedString64(playerInformation.PlayerName) &&
        writer.WriteInt(playerInformation.PlayerBodyIndex);
    }

    public static bool Deserialize(ref NetworkReader reader, ref PlayerInformation playerInformation)
    {
        long playerId = default;
        int playerHatIndex = default;
        Unity.Collections.FixedString64Bytes playerName = default;
        int playerBodyIndex = default;
        var result =
        reader.ReadLong(out playerId) &&
        reader.ReadInt(out playerHatIndex) &&
        reader.ReadFixedString64(out playerName) &&
        reader.ReadInt(out playerBodyIndex);
        if (!result) return false;
        playerInformation.PlayerId = playerId;
        playerInformation.PlayerHatIndex = playerHatIndex;
        playerInformation.PlayerName = playerName;
        playerInformation.PlayerBodyIndex = playerBodyIndex;
        return true;
    }
}
";
        Assert.AreEqual(expectedOutput, output);
    }
}
