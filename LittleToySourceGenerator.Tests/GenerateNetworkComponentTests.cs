namespace LittleToySourceGenerator.Tests;

using Microsoft.CodeAnalysis;
using Microsoft.VisualStudio.TestTools.UnitTesting;

[TestClass]
public class GenerateNetworkComponentTests : CodeGenerationTestBase
{
    [TestMethod]
    public void DirtyEventViewInterfaces()
    {
        string source = @"
using Plugins.basegame.Events;
using DOTSNET;

[Plugins.basegame.Events.CodeGenNetComponentAttribute(DOTSNET.SyncDirection.SERVER_TO_CLIENT)]
public partial struct Position3Data
{
    [MarkDirty] [SyncField] public int HatIndex;
    [MarkDirty] [SyncField] public int BodyIndex;
    [SyncField] public Unity.Collections.FixedString64Bytes UserName;
}
";
        var generator = new Generator();
        generator.DisableAllGeneration();
        generator.EnableEventDataGeneration = true;
        string output = this.GetGeneratedOutput(source, generator, NullableContextOptions.Disable);

        Assert.IsNotNull(output);

        var expectedOutput = @"// <auto-generated>
// Code generated by LittleToy Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>
#nullable enable
#pragma warning disable 1591
using System;
using Unity.Entities;
using Unity.Mathematics;
using Plugins.basegame.Events;
using DOTSNET;
using Unity.Collections;

public partial struct Position3Data : NetworkComponent
{
    public bool IsDirty { get; set; }
    public SyncDirection GetSyncDirection()
    {
        return SyncDirection.SERVER_TO_CLIENT;
    }

    public bool Serialize(ref NetworkWriter128 writer)
    {
        if (!writer.WriteInt(this.HatIndex)) return false;
        if (!writer.WriteInt(this.BodyIndex)) return false;
        if (!writer.WriteFixedString64(this.UserName)) return false;
        return true;
    }

    public bool Deserialize(ref NetworkReader128 reader)
    {
        int hatIndex = default;
        if (!reader.ReadInt(out hatIndex)) return false;
        int bodyIndex = default;
        if (!reader.ReadInt(out bodyIndex)) return false;
        if (!reader.ReadFixedString64(out this.UserName)) return false;
        
        var unchanged = true;
        if (unchanged && this.HatIndex != hatIndex) unchanged = false;
        if (unchanged && this.BodyIndex != bodyIndex) unchanged = false;
        if (unchanged) return true;
        IsDirty = true;
        
        this.HatIndex = hatIndex;
        this.BodyIndex = bodyIndex;
        return true;
    }
}
";
        Assert.AreEqual(expectedOutput, output);
    }

    [TestMethod]
    public void DirtyEventWithoutSync()
    {
        string source = @"
using Plugins.basegame.Events;
using DOTSNET;

[Plugins.basegame.Events.CodeGenNetComponentAttribute(DOTSNET.SyncDirection.SERVER_TO_CLIENT)]
public partial struct Position3Data
{
    [MarkDirty] public int HatIndex;
    [MarkDirty] [SyncField] public int BodyIndex;
    [SyncField] public Unity.Collections.FixedString64Bytes UserName;
}
";
        var generator = new Generator();
        generator.DisableAllGeneration();
        generator.EnableEventDataGeneration = true;
        string output = this.GetGeneratedOutput(source, generator, NullableContextOptions.Disable);

        Assert.IsNotNull(output);

        var expectedOutput = @"// <auto-generated>
// Code generated by LittleToy Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>
#nullable enable
#pragma warning disable 1591
using System;
using Unity.Entities;
using Unity.Mathematics;
using Plugins.basegame.Events;
using DOTSNET;
using Unity.Collections;

public partial struct Position3Data : NetworkComponent
{
    public bool IsDirty { get; set; }
    public Position3Data Update(int hatIndex)
    {
        if(HatIndex.Equals(hatIndex)) return this;
        
        IsDirty = true;
        HatIndex = hatIndex;
        
        return this;
    }

    public SyncDirection GetSyncDirection()
    {
        return SyncDirection.SERVER_TO_CLIENT;
    }

    public bool Serialize(ref NetworkWriter128 writer)
    {
        if (!writer.WriteInt(this.BodyIndex)) return false;
        if (!writer.WriteFixedString64(this.UserName)) return false;
        return true;
    }

    public bool Deserialize(ref NetworkReader128 reader)
    {
        int bodyIndex = default;
        if (!reader.ReadInt(out bodyIndex)) return false;
        if (!reader.ReadFixedString64(out this.UserName)) return false;
        
        var unchanged = true;
        if (unchanged && this.BodyIndex != bodyIndex) unchanged = false;
        if (unchanged) return true;
        IsDirty = true;
        
        this.BodyIndex = bodyIndex;
        return true;
    }
}
";
        Assert.AreEqual(expectedOutput, output);
    }

    [TestMethod]
    public void OnlySyncFields()
    {
        string source = @"
using Plugins.basegame.Events;
using DOTSNET;

[Plugins.basegame.Events.CodeGenNetComponentAttribute(DOTSNET.SyncDirection.SERVER_TO_CLIENT)]
public partial struct Position3Data
{
    [SyncField] public int HatIndex;
    [SyncField] public int BodyIndex;
    [SyncField] public Unity.Collections.FixedString64Bytes UserName;
}
";
        var generator = new Generator();
        generator.DisableAllGeneration();
        generator.EnableEventDataGeneration = true;
        string output = this.GetGeneratedOutput(source, generator, NullableContextOptions.Disable);

        Assert.IsNotNull(output);

        var expectedOutput = @"// <auto-generated>
// Code generated by LittleToy Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>
#nullable enable
#pragma warning disable 1591
using System;
using Unity.Entities;
using Unity.Mathematics;
using Plugins.basegame.Events;
using DOTSNET;
using Unity.Collections;

public partial struct Position3Data : NetworkComponent
{
    public SyncDirection GetSyncDirection()
    {
        return SyncDirection.SERVER_TO_CLIENT;
    }

    public bool Serialize(ref NetworkWriter128 writer)
    {
        if (!writer.WriteInt(this.HatIndex)) return false;
        if (!writer.WriteInt(this.BodyIndex)) return false;
        if (!writer.WriteFixedString64(this.UserName)) return false;
        return true;
    }

    public bool Deserialize(ref NetworkReader128 reader)
    {
        if (!reader.ReadInt(out this.HatIndex)) return false;
        if (!reader.ReadInt(out this.BodyIndex)) return false;
        if (!reader.ReadFixedString64(out this.UserName)) return false;
        return true;
    }
}
";
        Assert.AreEqual(expectedOutput, output);
    }

    [TestMethod]
    public void OnlyMarkDirtyFields()
    {
        string source = @"
using Plugins.basegame.Events;
using DOTSNET;

[Plugins.basegame.Events.CodeGenNetComponentAttribute(DOTSNET.SyncDirection.SERVER_TO_CLIENT)]
public partial struct Position3Data
{
    [MarkDirty] public int HatIndex;
    [MarkDirty] public int BodyIndex;
    [MarkDirty] public Unity.Collections.FixedString64Bytes UserName;
}
";
        var generator = new Generator();
        generator.DisableAllGeneration();
        generator.EnableEventDataGeneration = true;
        var diagnostics = this.GetDiagnosticsFromGenerator(source, generator, NullableContextOptions.Disable);

        Diagnostic? value = diagnostics.FirstOrDefault();
        Assert.IsNotNull(value);
        Assert.AreEqual("LT0002", value.Id);
        Assert.AreEqual("(5,1): error LT0002: Type Position3Data does not have any field marked with SyncFieldAttribute", value.ToString());
    }

    [TestMethod]
    public void UnknownTypeReported()
    {
        string source = @"
using Plugins.basegame.Events;
using DOTSNET;

[Plugins.basegame.Events.CodeGenNetComponentAttribute(DOTSNET.SyncDirection.SERVER_TO_CLIENT)]
public partial struct Position3Data
{
    [MarkDirty] [SyncField] public string HatIndex;
    [MarkDirty] [SyncField] public int BodyIndex;
    [SyncField] public Unity.Collections.FixedString64Bytes UserName;
}
";
        var generator = new Generator();
        generator.DisableAllGeneration();
        generator.EnableEventDataGeneration = true;
        var diagnostics = this.GetDiagnosticsFromGenerator(source, generator, NullableContextOptions.Disable);

        Diagnostic? value = diagnostics.FirstOrDefault();
        Assert.IsNotNull(value);
        Assert.AreEqual("LT0001", value.Id);
        Assert.AreEqual("(5,1): error LT0001: Cannot convert field type String to dotsnet read/write methods", value.ToString());
    }
    [TestMethod]
    public void AllFieldMapping()
    {
        string source = @"
using Plugins.basegame.Events;
using DOTSNET;

[Plugins.basegame.Events.CodeGenNetComponentAttribute(DOTSNET.SyncDirection.SERVER_TO_CLIENT)]
public partial struct UserInfoData
{
    [SyncField] public byte ByteField;
    [SyncField] public bool BoolField;
    [SyncField] public short ShortField;
    [SyncField] public ushort UShortField;
    [SyncField] public int Int32Field;
    [SyncField] public uint UInt32Field;
    [SyncField] public Unity.Mathematics.int2 Int2Field;
    [SyncField] public Unity.Mathematics.int3 Int3Field;
    [SyncField] public Unity.Mathematics.int4 Int4Field;
    [SyncField] public long Int64Field;
    [SyncField] public ulong UInt64Field;
    [SyncField] public DOTSNET.long3 Long3Field;
    [SyncField] public float FloatField;
    [SyncField] public Unity.Mathematics.float2 Float2Field;
    [SyncField] public Unity.Mathematics.float3 Float3Field;
    [SyncField] public Unity.Mathematics.float4 Float4Field;
    [SyncField] public double DoubleField;
    [SyncField] public Unity.Mathematics.double2 Double2Field;
    [SyncField] public Unity.Mathematics.double3 Double3Field;
    [SyncField] public Unity.Mathematics.double4 Double4Field;
    [SyncField] public decimal DecimalField;
    [SyncField] public Unity.Mathematics.quaternion QuaternionField;
    [SyncField] public Unity.Collections.FixedBytes16 Bytes16Field;
    [SyncField] public Unity.Collections.FixedBytes30 Bytes30Field;
    [SyncField] public Unity.Collections.FixedBytes62 Bytes62Field;
    [SyncField] public Unity.Collections.FixedBytes126 Bytes126Field;
    [SyncField] public Unity.Collections.FixedBytes510 Bytes510Field;
    [SyncField] public Unity.Collections.FixedBytes4094 Bytes4094Field;
    [SyncField] public Unity.Collections.FixedString32Bytes FixedString32Field;
    [SyncField] public Unity.Collections.FixedString64Bytes FixedString64Field;
    [SyncField] public Unity.Collections.FixedString128Bytes FixedString128Field;
    [SyncField] public Unity.Collections.FixedString512Bytes FixedString512Field;
}
";
        var generator = new Generator();
        generator.DisableAllGeneration();
        generator.EnableEventDataGeneration = true;
        string output = this.GetGeneratedOutput(source, generator, NullableContextOptions.Disable);

        Assert.IsNotNull(output);

        var expectedOutput = @"// <auto-generated>
// Code generated by LittleToy Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>
#nullable enable
#pragma warning disable 1591
using System;
using Unity.Entities;
using Unity.Mathematics;
using Plugins.basegame.Events;
using DOTSNET;
using Unity.Collections;

public partial struct UserInfoData : NetworkComponent
{
    public SyncDirection GetSyncDirection()
    {
        return SyncDirection.SERVER_TO_CLIENT;
    }

    public bool Serialize(ref NetworkWriter128 writer)
    {
        if (!writer.WriteByte(this.ByteField)) return false;
        if (!writer.WriteBool(this.BoolField)) return false;
        if (!writer.WriteShort(this.ShortField)) return false;
        if (!writer.WriteUShort(this.UShortField)) return false;
        if (!writer.WriteInt(this.Int32Field)) return false;
        if (!writer.WriteUInt(this.UInt32Field)) return false;
        if (!writer.WriteInt2(this.Int2Field)) return false;
        if (!writer.WriteInt3(this.Int3Field)) return false;
        if (!writer.WriteInt4(this.Int4Field)) return false;
        if (!writer.WriteLong(this.Int64Field)) return false;
        if (!writer.WriteULong(this.UInt64Field)) return false;
        if (!writer.WriteLong3(this.Long3Field)) return false;
        if (!writer.WriteFloat(this.FloatField)) return false;
        if (!writer.WriteFloat2(this.Float2Field)) return false;
        if (!writer.WriteFloat3(this.Float3Field)) return false;
        if (!writer.WriteFloat4(this.Float4Field)) return false;
        if (!writer.WriteDouble(this.DoubleField)) return false;
        if (!writer.WriteDouble2(this.Double2Field)) return false;
        if (!writer.WriteDouble3(this.Double3Field)) return false;
        if (!writer.WriteDouble4(this.Double4Field)) return false;
        if (!writer.WriteDecimal(this.DecimalField)) return false;
        if (!writer.WriteQuaternion(this.QuaternionField)) return false;
        if (!writer.WriteBytes16(this.Bytes16Field)) return false;
        if (!writer.WriteBytes30(this.Bytes30Field)) return false;
        if (!writer.WriteBytes62(this.Bytes62Field)) return false;
        if (!writer.WriteBytes126(this.Bytes126Field)) return false;
        if (!writer.WriteBytes510(this.Bytes510Field)) return false;
        if (!writer.WriteBytes4094(this.Bytes4094Field)) return false;
        if (!writer.WriteFixedString32(this.FixedString32Field)) return false;
        if (!writer.WriteFixedString64(this.FixedString64Field)) return false;
        if (!writer.WriteFixedString128(this.FixedString128Field)) return false;
        if (!writer.WriteFixedString512(this.FixedString512Field)) return false;
        return true;
    }

    public bool Deserialize(ref NetworkReader128 reader)
    {
        if (!reader.ReadByte(out this.ByteField)) return false;
        if (!reader.ReadBool(out this.BoolField)) return false;
        if (!reader.ReadShort(out this.ShortField)) return false;
        if (!reader.ReadUShort(out this.UShortField)) return false;
        if (!reader.ReadInt(out this.Int32Field)) return false;
        if (!reader.ReadUInt(out this.UInt32Field)) return false;
        if (!reader.ReadInt2(out this.Int2Field)) return false;
        if (!reader.ReadInt3(out this.Int3Field)) return false;
        if (!reader.ReadInt4(out this.Int4Field)) return false;
        if (!reader.ReadLong(out this.Int64Field)) return false;
        if (!reader.ReadULong(out this.UInt64Field)) return false;
        if (!reader.ReadLong3(out this.Long3Field)) return false;
        if (!reader.ReadFloat(out this.FloatField)) return false;
        if (!reader.ReadFloat2(out this.Float2Field)) return false;
        if (!reader.ReadFloat3(out this.Float3Field)) return false;
        if (!reader.ReadFloat4(out this.Float4Field)) return false;
        if (!reader.ReadDouble(out this.DoubleField)) return false;
        if (!reader.ReadDouble2(out this.Double2Field)) return false;
        if (!reader.ReadDouble3(out this.Double3Field)) return false;
        if (!reader.ReadDouble4(out this.Double4Field)) return false;
        if (!reader.ReadDecimal(out this.DecimalField)) return false;
        if (!reader.ReadQuaternion(out this.QuaternionField)) return false;
        if (!reader.ReadBytes16(out this.Bytes16Field)) return false;
        if (!reader.ReadBytes30(out this.Bytes30Field)) return false;
        if (!reader.ReadBytes62(out this.Bytes62Field)) return false;
        if (!reader.ReadBytes126(out this.Bytes126Field)) return false;
        if (!reader.ReadBytes510(out this.Bytes510Field)) return false;
        if (!reader.ReadBytes4094(out this.Bytes4094Field)) return false;
        if (!reader.ReadFixedString32(out this.FixedString32Field)) return false;
        if (!reader.ReadFixedString64(out this.FixedString64Field)) return false;
        if (!reader.ReadFixedString128(out this.FixedString128Field)) return false;
        if (!reader.ReadFixedString512(out this.FixedString512Field)) return false;
        return true;
    }
}
";
        Assert.AreEqual(expectedOutput, output);
    }

    [TestMethod]
    public void AllFieldMappingShortSyntax()
    {
        string source = @"
using Plugins.basegame.Events;
using DOTSNET;
using Unity.Mathematics;
using Unity.Collections;

[Plugins.basegame.Events.CodeGenNetComponentAttribute(DOTSNET.SyncDirection.SERVER_TO_CLIENT)]
public partial struct UserInfoData
{
    [SyncField] public byte ByteField;
    [SyncField] public bool BoolField;
    [SyncField] public short ShortField;
    [SyncField] public ushort UShortField;
    [SyncField] public int Int32Field;
    [SyncField] public uint UInt32Field;
    [SyncField] public int2 Int2Field;
    [SyncField] public int3 Int3Field;
    [SyncField] public int4 Int4Field;
    [SyncField] public long Int64Field;
    [SyncField] public ulong UInt64Field;
    [SyncField] public long3 Long3Field;
    [SyncField] public float FloatField;
    [SyncField] public float2 Float2Field;
    [SyncField] public float3 Float3Field;
    [SyncField] public float4 Float4Field;
    [SyncField] public double DoubleField;
    [SyncField] public double2 Double2Field;
    [SyncField] public double3 Double3Field;
    [SyncField] public double4 Double4Field;
    [SyncField] public decimal DecimalField;
    [SyncField] public quaternion QuaternionField;
    [SyncField] public FixedBytes16 Bytes16Field;
    [SyncField] public FixedBytes30 Bytes30Field;
    [SyncField] public FixedBytes62 Bytes62Field;
    [SyncField] public FixedBytes126 Bytes126Field;
    [SyncField] public FixedBytes510 Bytes510Field;
    [SyncField] public FixedBytes4094 Bytes4094Field;
    [SyncField] public FixedString32Bytes FixedString32Field;
    [SyncField] public FixedString64Bytes FixedString64Field;
    [SyncField] public FixedString128Bytes FixedString128Field;
    [SyncField] public FixedString512Bytes FixedString512Field;
}
";
        var generator = new Generator();
        generator.DisableAllGeneration();
        generator.EnableEventDataGeneration = true;
        string output = this.GetGeneratedOutput(source, generator, NullableContextOptions.Disable);

        Assert.IsNotNull(output);

        var expectedOutput = @"// <auto-generated>
// Code generated by LittleToy Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>
#nullable enable
#pragma warning disable 1591
using System;
using Unity.Entities;
using Unity.Mathematics;
using Plugins.basegame.Events;
using DOTSNET;
using Unity.Collections;

public partial struct UserInfoData : NetworkComponent
{
    public SyncDirection GetSyncDirection()
    {
        return SyncDirection.SERVER_TO_CLIENT;
    }

    public bool Serialize(ref NetworkWriter128 writer)
    {
        if (!writer.WriteByte(this.ByteField)) return false;
        if (!writer.WriteBool(this.BoolField)) return false;
        if (!writer.WriteShort(this.ShortField)) return false;
        if (!writer.WriteUShort(this.UShortField)) return false;
        if (!writer.WriteInt(this.Int32Field)) return false;
        if (!writer.WriteUInt(this.UInt32Field)) return false;
        if (!writer.WriteInt2(this.Int2Field)) return false;
        if (!writer.WriteInt3(this.Int3Field)) return false;
        if (!writer.WriteInt4(this.Int4Field)) return false;
        if (!writer.WriteLong(this.Int64Field)) return false;
        if (!writer.WriteULong(this.UInt64Field)) return false;
        if (!writer.WriteLong3(this.Long3Field)) return false;
        if (!writer.WriteFloat(this.FloatField)) return false;
        if (!writer.WriteFloat2(this.Float2Field)) return false;
        if (!writer.WriteFloat3(this.Float3Field)) return false;
        if (!writer.WriteFloat4(this.Float4Field)) return false;
        if (!writer.WriteDouble(this.DoubleField)) return false;
        if (!writer.WriteDouble2(this.Double2Field)) return false;
        if (!writer.WriteDouble3(this.Double3Field)) return false;
        if (!writer.WriteDouble4(this.Double4Field)) return false;
        if (!writer.WriteDecimal(this.DecimalField)) return false;
        if (!writer.WriteQuaternion(this.QuaternionField)) return false;
        if (!writer.WriteBytes16(this.Bytes16Field)) return false;
        if (!writer.WriteBytes30(this.Bytes30Field)) return false;
        if (!writer.WriteBytes62(this.Bytes62Field)) return false;
        if (!writer.WriteBytes126(this.Bytes126Field)) return false;
        if (!writer.WriteBytes510(this.Bytes510Field)) return false;
        if (!writer.WriteBytes4094(this.Bytes4094Field)) return false;
        if (!writer.WriteFixedString32(this.FixedString32Field)) return false;
        if (!writer.WriteFixedString64(this.FixedString64Field)) return false;
        if (!writer.WriteFixedString128(this.FixedString128Field)) return false;
        if (!writer.WriteFixedString512(this.FixedString512Field)) return false;
        return true;
    }

    public bool Deserialize(ref NetworkReader128 reader)
    {
        if (!reader.ReadByte(out this.ByteField)) return false;
        if (!reader.ReadBool(out this.BoolField)) return false;
        if (!reader.ReadShort(out this.ShortField)) return false;
        if (!reader.ReadUShort(out this.UShortField)) return false;
        if (!reader.ReadInt(out this.Int32Field)) return false;
        if (!reader.ReadUInt(out this.UInt32Field)) return false;
        if (!reader.ReadInt2(out this.Int2Field)) return false;
        if (!reader.ReadInt3(out this.Int3Field)) return false;
        if (!reader.ReadInt4(out this.Int4Field)) return false;
        if (!reader.ReadLong(out this.Int64Field)) return false;
        if (!reader.ReadULong(out this.UInt64Field)) return false;
        if (!reader.ReadLong3(out this.Long3Field)) return false;
        if (!reader.ReadFloat(out this.FloatField)) return false;
        if (!reader.ReadFloat2(out this.Float2Field)) return false;
        if (!reader.ReadFloat3(out this.Float3Field)) return false;
        if (!reader.ReadFloat4(out this.Float4Field)) return false;
        if (!reader.ReadDouble(out this.DoubleField)) return false;
        if (!reader.ReadDouble2(out this.Double2Field)) return false;
        if (!reader.ReadDouble3(out this.Double3Field)) return false;
        if (!reader.ReadDouble4(out this.Double4Field)) return false;
        if (!reader.ReadDecimal(out this.DecimalField)) return false;
        if (!reader.ReadQuaternion(out this.QuaternionField)) return false;
        if (!reader.ReadBytes16(out this.Bytes16Field)) return false;
        if (!reader.ReadBytes30(out this.Bytes30Field)) return false;
        if (!reader.ReadBytes62(out this.Bytes62Field)) return false;
        if (!reader.ReadBytes126(out this.Bytes126Field)) return false;
        if (!reader.ReadBytes510(out this.Bytes510Field)) return false;
        if (!reader.ReadBytes4094(out this.Bytes4094Field)) return false;
        if (!reader.ReadFixedString32(out this.FixedString32Field)) return false;
        if (!reader.ReadFixedString64(out this.FixedString64Field)) return false;
        if (!reader.ReadFixedString128(out this.FixedString128Field)) return false;
        if (!reader.ReadFixedString512(out this.FixedString512Field)) return false;
        return true;
    }
}
";
        Assert.AreEqual(expectedOutput, output);
    }

    [TestMethod]
    public void NetworkComponentGeneration()
    {
        string source = @"
using Plugins.basegame.Events;
using Unity.Collections;

[CodeGenNetComponentAttribute(DOTSNET.SyncDirection.SERVER_TO_CLIENT)]
public partial struct JoinWorldMessage
{
    public long PlayerId;

    public int PlayerHatIndex;
    public int PlayerBodyIndex;
    public FixedString64Bytes PlayerName;
}
";
        var generator = new Generator();
        generator.DisableAllGeneration();
        generator.EnableNetworkComponentGeneration = true;
        string output = this.GetGeneratedOutput(source, generator, NullableContextOptions.Disable);

        Assert.IsNotNull(output);

        var expectedOutput = @"// <auto-generated>
// Code generated by LittleToy Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>
#nullable enable
#pragma warning disable 1591
using Unity.Jobs;
[assembly: RegisterGenericJobType(typeof(DOTSNetworkComponentSerializer<JoinWorldMessage>.NetworkComponentSerializerJob))]
[assembly: RegisterGenericJobType(typeof(DOTSNetworkComponentSerializer<JoinWorldMessage>.NetworkComponentDeserializerJob))]

public class JoinWorldMessageSerializer : DOTSNetworkComponentSerializer<JoinWorldMessage>
{
}
";
        Assert.AreEqual(expectedOutput, output);
    }

    [TestMethod]
    public void NetComponentInsideNamespace()
    {
        string source = @"
using Plugins.basegame.Events;
using DOTSNET;

namespace Test.InnerNamespace
{
    [Plugins.basegame.Events.CodeGenNetComponentAttribute(DOTSNET.SyncDirection.SERVER_TO_CLIENT)]
    public partial struct Position3Data
    {
        [MarkDirty] [SyncField] public int HatIndex;
        [MarkDirty] [SyncField] public int BodyIndex;
        [SyncField] public Unity.Collections.FixedString64Bytes UserName;
    }
}
";
        var generator = new Generator();
        generator.DisableAllGeneration();
        generator.EnableEventDataGeneration = true;
        string output = this.GetGeneratedOutput(source, generator, NullableContextOptions.Disable);

        Assert.IsNotNull(output);

        var expectedOutput = @"// <auto-generated>
// Code generated by LittleToy Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>
#nullable enable
#pragma warning disable 1591
using System;
using Unity.Entities;
using Unity.Mathematics;
using Plugins.basegame.Events;
using DOTSNET;
using Unity.Collections;

namespace Test.InnerNamespace
{

    public partial struct Position3Data : NetworkComponent
    {
        public bool IsDirty { get; set; }
        public SyncDirection GetSyncDirection()
        {
            return SyncDirection.SERVER_TO_CLIENT;
        }

        public bool Serialize(ref NetworkWriter128 writer)
        {
            if (!writer.WriteInt(this.HatIndex)) return false;
            if (!writer.WriteInt(this.BodyIndex)) return false;
            if (!writer.WriteFixedString64(this.UserName)) return false;
            return true;
        }

        public bool Deserialize(ref NetworkReader128 reader)
        {
            int hatIndex = default;
            if (!reader.ReadInt(out hatIndex)) return false;
            int bodyIndex = default;
            if (!reader.ReadInt(out bodyIndex)) return false;
            if (!reader.ReadFixedString64(out this.UserName)) return false;
            
            var unchanged = true;
            if (unchanged && this.HatIndex != hatIndex) unchanged = false;
            if (unchanged && this.BodyIndex != bodyIndex) unchanged = false;
            if (unchanged) return true;
            IsDirty = true;
            
            this.HatIndex = hatIndex;
            this.BodyIndex = bodyIndex;
            return true;
        }
    }
}
";
        Assert.AreEqual(expectedOutput, output);
    }

    [TestMethod]
    public void NetworkComponentGenerationWithNamespace()
    {
        string source = @"
using Plugins.basegame.Events;
using Unity.Collections;

namespace Test.Inside
{
    [CodeGenNetComponentAttribute(DOTSNET.SyncDirection.SERVER_TO_CLIENT)]
    public partial struct JoinWorldMessage
    {
        public long PlayerId;

        public int PlayerHatIndex;
        public int PlayerBodyIndex;
        public FixedString64Bytes PlayerName;
    }
}
";
        var generator = new Generator();
        generator.DisableAllGeneration();
        generator.EnableNetworkComponentGeneration = true;
        string output = this.GetGeneratedOutput(source, generator, NullableContextOptions.Disable);

        Assert.IsNotNull(output);

        var expectedOutput = @"// <auto-generated>
// Code generated by LittleToy Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>
#nullable enable
#pragma warning disable 1591
using Unity.Jobs;
[assembly: RegisterGenericJobType(typeof(DOTSNetworkComponentSerializer<Test.Inside.JoinWorldMessage>.NetworkComponentSerializerJob))]
[assembly: RegisterGenericJobType(typeof(DOTSNetworkComponentSerializer<Test.Inside.JoinWorldMessage>.NetworkComponentDeserializerJob))]

namespace Test.Inside
{

    public class JoinWorldMessageSerializer : DOTSNetworkComponentSerializer<Test.Inside.JoinWorldMessage>
    {
    }
}
";
        Assert.AreEqual(expectedOutput, output);
    }

    [TestMethod]
    public void DirtyEventWithEnums()
    {
        string source = @"
using Plugins.basegame.Events;
using DOTSNET;

public enum MyTestEnum
{
    X, Y, Z
}

[Plugins.basegame.Events.CodeGenNetComponentAttribute(DOTSNET.SyncDirection.SERVER_TO_CLIENT)]
public partial struct Position3Data
{
    [MarkDirty] [SyncField] public int HatIndex;
    [MarkDirty] [SyncField] public MyTestEnum BodyIndex;
    [SyncField] public MyTestEnum UserName;
}
";
        var generator = new Generator();
        generator.DisableAllGeneration();
        generator.EnableEventDataGeneration = true;
        string output = this.GetGeneratedOutput(source, generator, NullableContextOptions.Disable);

        Assert.IsNotNull(output);

        var expectedOutput = @"// <auto-generated>
// Code generated by LittleToy Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>
#nullable enable
#pragma warning disable 1591
using System;
using Unity.Entities;
using Unity.Mathematics;
using Plugins.basegame.Events;
using DOTSNET;
using Unity.Collections;

public partial struct Position3Data : NetworkComponent
{
    public bool IsDirty { get; set; }
    public SyncDirection GetSyncDirection()
    {
        return SyncDirection.SERVER_TO_CLIENT;
    }

    public bool Serialize(ref NetworkWriter128 writer)
    {
        if (!writer.WriteInt(this.HatIndex)) return false;
        if (!writer.WriteInt((int)this.BodyIndex)) return false;
        if (!writer.WriteInt((int)this.UserName)) return false;
        return true;
    }

    public bool Deserialize(ref NetworkReader128 reader)
    {
        int hatIndex = default;
        if (!reader.ReadInt(out hatIndex)) return false;
        int bodyIndex = default;
        if (!reader.ReadInt(out bodyIndex)) return false;
        int userName = default;
        if (!reader.ReadInt(out userName)) return false;
        
        this.UserName = (MyTestEnum)userName;
        var unchanged = true;
        if (unchanged && this.HatIndex != hatIndex) unchanged = false;
        if (unchanged && this.BodyIndex != (MyTestEnum)bodyIndex) unchanged = false;
        if (unchanged) return true;
        IsDirty = true;
        
        this.HatIndex = hatIndex;
        this.BodyIndex = (MyTestEnum)bodyIndex;
        return true;
    }
}
";
        Assert.AreEqual(expectedOutput, output);
    }

    [TestMethod]
    public void SyncFieldWithEnums()
    {
        string source = @"
using Plugins.basegame.Events;
using DOTSNET;

public enum MyTestEnum
{
    X, Y, Z
}

[Plugins.basegame.Events.CodeGenNetComponentAttribute(DOTSNET.SyncDirection.SERVER_TO_CLIENT)]
public partial struct Position3Data
{
    [SyncField] public int HatIndex;
    [SyncField] public MyTestEnum BodyIndex;
    [SyncField] public MyTestEnum UserName;
}
";
        var generator = new Generator();
        generator.DisableAllGeneration();
        generator.EnableEventDataGeneration = true;
        string output = this.GetGeneratedOutput(source, generator, NullableContextOptions.Disable);

        Assert.IsNotNull(output);

        var expectedOutput = @"// <auto-generated>
// Code generated by LittleToy Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>
#nullable enable
#pragma warning disable 1591
using System;
using Unity.Entities;
using Unity.Mathematics;
using Plugins.basegame.Events;
using DOTSNET;
using Unity.Collections;

public partial struct Position3Data : NetworkComponent
{
    public SyncDirection GetSyncDirection()
    {
        return SyncDirection.SERVER_TO_CLIENT;
    }

    public bool Serialize(ref NetworkWriter128 writer)
    {
        if (!writer.WriteInt(this.HatIndex)) return false;
        if (!writer.WriteInt((int)this.BodyIndex)) return false;
        if (!writer.WriteInt((int)this.UserName)) return false;
        return true;
    }

    public bool Deserialize(ref NetworkReader128 reader)
    {
        if (!reader.ReadInt(out this.HatIndex)) return false;
        int bodyIndex = default;
        if (!reader.ReadInt(out bodyIndex)) return false;
        int userName = default;
        if (!reader.ReadInt(out userName)) return false;
        
        this.BodyIndex = (MyTestEnum)bodyIndex;
        this.UserName = (MyTestEnum)userName;
        return true;
    }
}
";
        Assert.AreEqual(expectedOutput, output);
    }

    [TestMethod]
    public void DirtyEventWithFixedList()
    {
        string source = @"
using Plugins.basegame.Events;
using DOTSNET;
using Unity.Collections;

public enum MyTestEnum
{
    X, Y, Z
}

[Plugins.basegame.Events.CodeGenNetComponentAttribute(DOTSNET.SyncDirection.SERVER_TO_CLIENT)]
public partial struct Position3Data
{
    [MarkDirty] [SyncField] public FixedList64Bytes<byte> HatIndex;
    [MarkDirty] [SyncField] public FixedList128Bytes<long> BodyIndex;
    [SyncField] public FixedList512Bytes<int> UserName;
}
";
        var generator = new Generator();
        generator.DisableAllGeneration();
        generator.EnableEventDataGeneration = true;
        string output = this.GetGeneratedOutput(source, generator, NullableContextOptions.Disable);

        Assert.IsNotNull(output);

        var expectedOutput = @"// <auto-generated>
// Code generated by LittleToy Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>
#nullable enable
#pragma warning disable 1591
using System;
using Unity.Entities;
using Unity.Mathematics;
using Plugins.basegame.Events;
using DOTSNET;
using Unity.Collections;

public partial struct Position3Data : NetworkComponent
{
    public bool IsDirty { get; set; }
    public SyncDirection GetSyncDirection()
    {
        return SyncDirection.SERVER_TO_CLIENT;
    }

    public bool Serialize(ref NetworkWriter128 writer)
    {
        if (!DotsNetworkExtension.WriteFixedList64Batched(ref writer, in this.HatIndex)) return false;
        if (!DotsNetworkExtension.WriteFixedList128Batched(ref writer, in this.BodyIndex)) return false;
        if (!DotsNetworkExtension.WriteFixedList512Batched(ref writer, in this.UserName)) return false;
        return true;
    }

    public bool Deserialize(ref NetworkReader128 reader)
    {
        Unity.Collections.FixedList64Bytes<byte> hatIndex = default;
        if (!DotsNetworkExtension.ReadFixedList64Batched(ref reader, ref hatIndex)) return false;
        Unity.Collections.FixedList128Bytes<long> bodyIndex = default;
        if (!DotsNetworkExtension.ReadFixedList128Batched(ref reader, ref bodyIndex)) return false;
        Unity.Collections.FixedList512Bytes<int> userName = default;
        if (!DotsNetworkExtension.ReadFixedList512Batched(ref reader, ref userName)) return false;
        
        this.UserName = userName;
        var unchanged = true;
        if (unchanged && this.HatIndex != hatIndex) unchanged = false;
        if (unchanged && this.BodyIndex != bodyIndex) unchanged = false;
        if (unchanged) return true;
        IsDirty = true;
        
        this.HatIndex = hatIndex;
        this.BodyIndex = bodyIndex;
        return true;
    }
}
";
        Assert.AreEqual(expectedOutput, output);
    }

    [TestMethod]
    public void SyncFieldWithFixedList()
    {
        string source = @"
using Plugins.basegame.Events;
using DOTSNET;
using Unity.Collections;

public enum MyTestEnum
{
    X, Y, Z
}

[Plugins.basegame.Events.CodeGenNetComponentAttribute(DOTSNET.SyncDirection.SERVER_TO_CLIENT)]
public partial struct Position3Data
{
    [SyncField] public int HatIndex;
    [SyncField] public FixedList128Bytes<long> BodyIndex;
    [SyncField] public MyTestEnum UserName;
}
";
        var generator = new Generator();
        generator.DisableAllGeneration();
        generator.EnableEventDataGeneration = true;
        string output = this.GetGeneratedOutput(source, generator, NullableContextOptions.Disable);

        Assert.IsNotNull(output);

        var expectedOutput = @"// <auto-generated>
// Code generated by LittleToy Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>
#nullable enable
#pragma warning disable 1591
using System;
using Unity.Entities;
using Unity.Mathematics;
using Plugins.basegame.Events;
using DOTSNET;
using Unity.Collections;

public partial struct Position3Data : NetworkComponent
{
    public SyncDirection GetSyncDirection()
    {
        return SyncDirection.SERVER_TO_CLIENT;
    }

    public bool Serialize(ref NetworkWriter128 writer)
    {
        if (!writer.WriteInt(this.HatIndex)) return false;
        if (!DotsNetworkExtension.WriteFixedList128Batched(ref writer, in this.BodyIndex)) return false;
        if (!writer.WriteInt((int)this.UserName)) return false;
        return true;
    }

    public bool Deserialize(ref NetworkReader128 reader)
    {
        if (!reader.ReadInt(out this.HatIndex)) return false;
        Unity.Collections.FixedList128Bytes<long> bodyIndex = default;
        if (!DotsNetworkExtension.ReadFixedList128Batched(ref reader, ref bodyIndex)) return false;
        int userName = default;
        if (!reader.ReadInt(out userName)) return false;
        
        this.BodyIndex = bodyIndex;
        this.UserName = (MyTestEnum)userName;
        return true;
    }
}
";
        Assert.AreEqual(expectedOutput, output);
    }
    [TestMethod]
    public void DirtyEventViewInterfacesWithProperties()
    {
        string source = @"
using Plugins.basegame.Events;
using DOTSNET;

[Plugins.basegame.Events.CodeGenNetComponentAttribute(DOTSNET.SyncDirection.SERVER_TO_CLIENT)]
public partial struct Position3Data
{
    [MarkDirty] [SyncField] public int HatIndex { get; set; }
    [MarkDirty] [SyncField] public int BodyIndex { get; set; }
    [SyncField] public Unity.Collections.FixedString64Bytes UserName { get; set; }
}
";
        var generator = new Generator();
        generator.DisableAllGeneration();
        generator.EnableEventDataGeneration = true;
        string output = this.GetGeneratedOutput(source, generator, NullableContextOptions.Disable);

        Assert.IsNotNull(output);

        var expectedOutput = @"// <auto-generated>
// Code generated by LittleToy Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>
#nullable enable
#pragma warning disable 1591
using System;
using Unity.Entities;
using Unity.Mathematics;
using Plugins.basegame.Events;
using DOTSNET;
using Unity.Collections;

public partial struct Position3Data : NetworkComponent
{
    public bool IsDirty { get; set; }
    public SyncDirection GetSyncDirection()
    {
        return SyncDirection.SERVER_TO_CLIENT;
    }

    public bool Serialize(ref NetworkWriter128 writer)
    {
        if (!writer.WriteInt(this.HatIndex)) return false;
        if (!writer.WriteInt(this.BodyIndex)) return false;
        if (!writer.WriteFixedString64(this.UserName)) return false;
        return true;
    }

    public bool Deserialize(ref NetworkReader128 reader)
    {
        int hatIndex = default;
        if (!reader.ReadInt(out hatIndex)) return false;
        int bodyIndex = default;
        if (!reader.ReadInt(out bodyIndex)) return false;
        Unity.Collections.FixedString64Bytes userName = default;
        if (!reader.ReadFixedString64(out userName)) return false;
        
        this.UserName = userName;
        var unchanged = true;
        if (unchanged && this.HatIndex != hatIndex) unchanged = false;
        if (unchanged && this.BodyIndex != bodyIndex) unchanged = false;
        if (unchanged) return true;
        IsDirty = true;
        
        this.HatIndex = hatIndex;
        this.BodyIndex = bodyIndex;
        return true;
    }
}
";
        Assert.AreEqual(expectedOutput, output);
    }

    [TestMethod]
    public void SyncFieldWithEnumsProperties()
    {
        string source = @"
using Plugins.basegame.Events;
using DOTSNET;

public enum MyTestEnum
{
    X, Y, Z
}

[Plugins.basegame.Events.CodeGenNetComponentAttribute(DOTSNET.SyncDirection.SERVER_TO_CLIENT)]
public partial struct Position3Data
{
    [SyncField] public int HatIndex { get; set; }
    [SyncField] public MyTestEnum BodyIndex { get; set; }
    [SyncField] public MyTestEnum UserName { get; set; }
}
";
        var generator = new Generator();
        generator.DisableAllGeneration();
        generator.EnableEventDataGeneration = true;
        string output = this.GetGeneratedOutput(source, generator, NullableContextOptions.Disable);

        Assert.IsNotNull(output);

        var expectedOutput = @"// <auto-generated>
// Code generated by LittleToy Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>
#nullable enable
#pragma warning disable 1591
using System;
using Unity.Entities;
using Unity.Mathematics;
using Plugins.basegame.Events;
using DOTSNET;
using Unity.Collections;

public partial struct Position3Data : NetworkComponent
{
    public SyncDirection GetSyncDirection()
    {
        return SyncDirection.SERVER_TO_CLIENT;
    }

    public bool Serialize(ref NetworkWriter128 writer)
    {
        if (!writer.WriteInt(this.HatIndex)) return false;
        if (!writer.WriteInt((int)this.BodyIndex)) return false;
        if (!writer.WriteInt((int)this.UserName)) return false;
        return true;
    }

    public bool Deserialize(ref NetworkReader128 reader)
    {
        int hatIndex = default;
        if (!reader.ReadInt(out hatIndex)) return false;
        int bodyIndex = default;
        if (!reader.ReadInt(out bodyIndex)) return false;
        int userName = default;
        if (!reader.ReadInt(out userName)) return false;
        
        this.HatIndex = hatIndex;
        this.BodyIndex = (MyTestEnum)bodyIndex;
        this.UserName = (MyTestEnum)userName;
        return true;
    }
}
";
        Assert.AreEqual(expectedOutput, output);
    }

    [TestMethod]
    public void SyncFieldWithFixedListOnProperties()
    {
        string source = @"
using Plugins.basegame.Events;
using DOTSNET;
using Unity.Collections;

public enum MyTestEnum
{
    X, Y, Z
}

[Plugins.basegame.Events.CodeGenNetComponentAttribute(DOTSNET.SyncDirection.SERVER_TO_CLIENT)]
public partial struct Position3Data
{
    [SyncField] public int HatIndex { get; set; }
    [SyncField] public FixedList128Bytes<long> BodyIndex { get; set; }
    [SyncField] public MyTestEnum UserName { get; set; }
}
";
        var generator = new Generator();
        generator.DisableAllGeneration();
        generator.EnableEventDataGeneration = true;
        string output = this.GetGeneratedOutput(source, generator, NullableContextOptions.Disable);

        Assert.IsNotNull(output);

        var expectedOutput = @"// <auto-generated>
// Code generated by LittleToy Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>
#nullable enable
#pragma warning disable 1591
using System;
using Unity.Entities;
using Unity.Mathematics;
using Plugins.basegame.Events;
using DOTSNET;
using Unity.Collections;

public partial struct Position3Data : NetworkComponent
{
    public SyncDirection GetSyncDirection()
    {
        return SyncDirection.SERVER_TO_CLIENT;
    }

    public bool Serialize(ref NetworkWriter128 writer)
    {
        if (!writer.WriteInt(this.HatIndex)) return false;
        if (!DotsNetworkExtension.WriteFixedList128Batched(ref writer, in this.BodyIndex)) return false;
        if (!writer.WriteInt((int)this.UserName)) return false;
        return true;
    }

    public bool Deserialize(ref NetworkReader128 reader)
    {
        int hatIndex = default;
        if (!reader.ReadInt(out hatIndex)) return false;
        Unity.Collections.FixedList128Bytes<long> bodyIndex = default;
        if (!DotsNetworkExtension.ReadFixedList128Batched(ref reader, ref bodyIndex)) return false;
        int userName = default;
        if (!reader.ReadInt(out userName)) return false;
        
        this.HatIndex = hatIndex;
        this.BodyIndex = bodyIndex;
        this.UserName = (MyTestEnum)userName;
        return true;
    }
}
";
        Assert.AreEqual(expectedOutput, output);
    }

    [TestMethod]
    public void SyncFieldOnStruct()
    {
        string source = @"
using Plugins.basegame.Events;
using DOTSNET;
using Unity.Collections;

public enum MyTestEnum
{
    X, Y, Z
}

public struct UserInformation
{
    public int HatIndex;
    public FixedList128Bytes<long> BodyIndex;
    public MyTestEnum UserName;
}

[Plugins.basegame.Events.CodeGenNetComponentAttribute(DOTSNET.SyncDirection.SERVER_TO_CLIENT)]
public partial struct Position3Data
{
    [SyncField] public UserInformation Data;
}
";
        var generator = new Generator();
        generator.DisableAllGeneration();
        generator.EnableEventDataGeneration = true;
        string output = this.GetGeneratedOutput(source, generator, NullableContextOptions.Disable);

        Assert.IsNotNull(output);

        var expectedOutput = @"// <auto-generated>
// Code generated by LittleToy Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>
#nullable enable
#pragma warning disable 1591
using System;
using Unity.Entities;
using Unity.Mathematics;
using Plugins.basegame.Events;
using DOTSNET;
using Unity.Collections;

public partial struct Position3Data : NetworkComponent
{
    public SyncDirection GetSyncDirection()
    {
        return SyncDirection.SERVER_TO_CLIENT;
    }

    public bool Serialize(ref NetworkWriter128 writer)
    {
        if (!Serialize(ref writer, ref this.Data)) return false;
        return true;
    }

    public bool Deserialize(ref NetworkReader128 reader)
    {
        UserInformation data = default;
        if (!Deserialize(ref reader, ref data)) return false;
        
        this.Data = (UserInformation)data;
        return true;
    }

    public static bool Serialize(ref NetworkWriter128 writer, ref UserInformation userInformation)
    {
        if (!writer.WriteInt(userInformation.HatIndex)) return false;
        if (!DotsNetworkExtension.WriteFixedList128Batched(ref writer, in userInformation.BodyIndex)) return false;
        if (!writer.WriteInt((int)userInformation.UserName)) return false;
        return true;
    }

    public static bool Deserialize(ref NetworkReader128 reader, ref UserInformation userInformation)
    {
        if (!reader.ReadInt(out userInformation.HatIndex)) return false;
        Unity.Collections.FixedList128Bytes<long> bodyIndex = default;
        if (!DotsNetworkExtension.ReadFixedList128Batched(ref reader, ref bodyIndex)) return false;
        int userName = default;
        if (!reader.ReadInt(out userName)) return false;
        
        userInformation.BodyIndex = bodyIndex;
        userInformation.UserName = (MyTestEnum)userName;
        return true;
    }
}
";
        Assert.AreEqual(expectedOutput, output);
    }

    [TestMethod]
    public void MarkDirtyOnStruct()
    {
        string source = @"
using Plugins.basegame.Events;
using DOTSNET;
using Unity.Collections;

public enum MyTestEnum
{
    X, Y, Z
}

public struct UserInformation
{
    public int HatIndex;
    public FixedList128Bytes<long> BodyIndex;
    public MyTestEnum UserName;
}

[Plugins.basegame.Events.CodeGenNetComponentAttribute(DOTSNET.SyncDirection.SERVER_TO_CLIENT)]
public partial struct Position3Data
{
    [MarkDirty] [SyncField] public UserInformation Data;
}
";
        var generator = new Generator();
        generator.DisableAllGeneration();
        generator.EnableEventDataGeneration = true;
        string output = this.GetGeneratedOutput(source, generator, NullableContextOptions.Disable);

        Assert.IsNotNull(output);

        var expectedOutput = @"// <auto-generated>
// Code generated by LittleToy Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>
#nullable enable
#pragma warning disable 1591
using System;
using Unity.Entities;
using Unity.Mathematics;
using Plugins.basegame.Events;
using DOTSNET;
using Unity.Collections;

public partial struct Position3Data : NetworkComponent
{
    public bool IsDirty { get; set; }
    public SyncDirection GetSyncDirection()
    {
        return SyncDirection.SERVER_TO_CLIENT;
    }

    public bool Serialize(ref NetworkWriter128 writer)
    {
        if (!Serialize(ref writer, ref this.Data)) return false;
        return true;
    }

    public bool Deserialize(ref NetworkReader128 reader)
    {
        UserInformation data = default;
        if (!Deserialize(ref reader, ref data)) return false;
        
        var unchanged = true;
        if (unchanged && this.Data != (UserInformation)data) unchanged = false;
        if (unchanged) return true;
        IsDirty = true;
        
        this.Data = (UserInformation)data;
        return true;
    }

    public static bool Serialize(ref NetworkWriter128 writer, ref UserInformation userInformation)
    {
        if (!writer.WriteInt(userInformation.HatIndex)) return false;
        if (!DotsNetworkExtension.WriteFixedList128Batched(ref writer, in userInformation.BodyIndex)) return false;
        if (!writer.WriteInt((int)userInformation.UserName)) return false;
        return true;
    }

    public static bool Deserialize(ref NetworkReader128 reader, ref UserInformation userInformation)
    {
        if (!reader.ReadInt(out userInformation.HatIndex)) return false;
        Unity.Collections.FixedList128Bytes<long> bodyIndex = default;
        if (!DotsNetworkExtension.ReadFixedList128Batched(ref reader, ref bodyIndex)) return false;
        int userName = default;
        if (!reader.ReadInt(out userName)) return false;
        
        userInformation.BodyIndex = bodyIndex;
        userInformation.UserName = (MyTestEnum)userName;
        return true;
    }
}
";
        Assert.AreEqual(expectedOutput, output);
    }

    [TestMethod]
    public void IgnoreNotMarkedFields()
    {
        string source = @"
using Plugins.basegame.Events;
using DOTSNET;
using Unity.Collections;

public enum MyTestEnum
{
    X, Y, Z
}

public struct UserInformation
{
    public int HatIndex;
    public FixedList128Bytes<long> BodyIndex;
    public MyTestEnum UserName;
}

[Plugins.basegame.Events.CodeGenNetComponentAttribute(DOTSNET.SyncDirection.SERVER_TO_CLIENT)]
public partial struct Position3Data
{
    [MarkDirty] [SyncField] public UserInformation Data;
    public FixedList4096Bytes<FixedString64Bytes> Names;
}
";
        var generator = new Generator();
        generator.DisableAllGeneration();
        generator.EnableEventDataGeneration = true;
        string output = this.GetGeneratedOutput(source, generator, NullableContextOptions.Disable);

        Assert.IsNotNull(output);

        var expectedOutput = @"// <auto-generated>
// Code generated by LittleToy Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>
#nullable enable
#pragma warning disable 1591
using System;
using Unity.Entities;
using Unity.Mathematics;
using Plugins.basegame.Events;
using DOTSNET;
using Unity.Collections;

public partial struct Position3Data : NetworkComponent
{
    public bool IsDirty { get; set; }
    public SyncDirection GetSyncDirection()
    {
        return SyncDirection.SERVER_TO_CLIENT;
    }

    public bool Serialize(ref NetworkWriter128 writer)
    {
        if (!Serialize(ref writer, ref this.Data)) return false;
        return true;
    }

    public bool Deserialize(ref NetworkReader128 reader)
    {
        UserInformation data = default;
        if (!Deserialize(ref reader, ref data)) return false;
        
        var unchanged = true;
        if (unchanged && this.Data != (UserInformation)data) unchanged = false;
        if (unchanged) return true;
        IsDirty = true;
        
        this.Data = (UserInformation)data;
        return true;
    }

    public static bool Serialize(ref NetworkWriter128 writer, ref UserInformation userInformation)
    {
        if (!writer.WriteInt(userInformation.HatIndex)) return false;
        if (!DotsNetworkExtension.WriteFixedList128Batched(ref writer, in userInformation.BodyIndex)) return false;
        if (!writer.WriteInt((int)userInformation.UserName)) return false;
        return true;
    }

    public static bool Deserialize(ref NetworkReader128 reader, ref UserInformation userInformation)
    {
        if (!reader.ReadInt(out userInformation.HatIndex)) return false;
        Unity.Collections.FixedList128Bytes<long> bodyIndex = default;
        if (!DotsNetworkExtension.ReadFixedList128Batched(ref reader, ref bodyIndex)) return false;
        int userName = default;
        if (!reader.ReadInt(out userName)) return false;
        
        userInformation.BodyIndex = bodyIndex;
        userInformation.UserName = (MyTestEnum)userName;
        return true;
    }
}
";
        Assert.AreEqual(expectedOutput, output);
    }
}
