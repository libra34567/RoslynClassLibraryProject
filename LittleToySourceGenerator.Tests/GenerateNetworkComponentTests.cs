namespace LittleToySourceGenerator.Tests;

using Microsoft.CodeAnalysis;
using Microsoft.VisualStudio.TestTools.UnitTesting;

[TestClass]
public class GenerateNetworkComponentTests : CodeGenerationTestBase
{
    [TestMethod]
    public void DirtyEventViewInterfaces()
    {
        string source = @"
using Plugins.basegame.Events;
using DOTSNET;

[Plugins.basegame.Events.CodeGenNetComponentAttribute(DOTSNET.SyncDirection.SERVER_TO_CLIENT)]
public partial struct Position3Data
{
    [MarkDirty] [SyncField] public int HatIndex;
    [MarkDirty] [SyncField] public int BodyIndex;
    [SyncField] public Unity.Collections.FixedString64Bytes UserName;
}
";
        var generator = new Generator();
        generator.DisableAllGeneration();
        generator.EnableEventDataGeneration = true;
        string output = this.GetGeneratedOutput(source, generator, NullableContextOptions.Disable);

        Assert.IsNotNull(output);

        var expectedOutput = @"// <auto-generated>
// Code generated by LittleToy Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>
#nullable enable
#pragma warning disable 1591
using System;
using Unity.Entities;
using Unity.Mathematics;
using Plugins.basegame.Events;
using DOTSNET;
using Unity.Collections;

public partial struct Position3Data : NetworkComponent
{
    public bool IsDirty { get; set; }
    public SyncDirection GetSyncDirection()
    {
        return SyncDirection.SERVER_TO_CLIENT;
    }

    public bool Serialize(ref NetworkWriter128 writer)
    {
        return writer.WriteInt(HatIndex) && writer.WriteInt(BodyIndex) && writer.WriteFixedString64(UserName);
    }

    public bool Deserialize(ref NetworkReader128 reader)
    {
        if (reader.ReadInt(out var hatindex) && reader.ReadInt(out var bodyindex) && reader.ReadFixedString64(out UserName))
        {
            if (HatIndex != hatindex || BodyIndex != bodyindex)
            {
                IsDirty = true;
                HatIndex = hatindex;
                BodyIndex = bodyindex;
            }
            return true;
        }
        return false;
    }
}
";
        Assert.AreEqual(expectedOutput, output);
    }
    
    [TestMethod]
    public void OnlySyncFields()
    {
        string source = @"
using Plugins.basegame.Events;
using DOTSNET;

[Plugins.basegame.Events.CodeGenNetComponentAttribute(DOTSNET.SyncDirection.SERVER_TO_CLIENT)]
public partial struct Position3Data
{
    [SyncField] public int HatIndex;
    [SyncField] public int BodyIndex;
    [SyncField] public Unity.Collections.FixedString64Bytes UserName;
}
";
        var generator = new Generator();
        generator.DisableAllGeneration();
        generator.EnableEventDataGeneration = true;
        string output = this.GetGeneratedOutput(source, generator, NullableContextOptions.Disable);

        Assert.IsNotNull(output);

        var expectedOutput = @"// <auto-generated>
// Code generated by LittleToy Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>
#nullable enable
#pragma warning disable 1591
using System;
using Unity.Entities;
using Unity.Mathematics;
using Plugins.basegame.Events;
using DOTSNET;
using Unity.Collections;

public partial struct Position3Data : NetworkComponent
{
    public SyncDirection GetSyncDirection()
    {
        return SyncDirection.SERVER_TO_CLIENT;
    }

    public bool Serialize(ref NetworkWriter128 writer)
    {
        return writer.WriteInt(HatIndex) && writer.WriteInt(BodyIndex) && writer.WriteFixedString64(UserName);
    }

    public bool Deserialize(ref NetworkReader128 reader)
    {
        return reader.ReadInt(out HatIndex) && reader.ReadInt(out BodyIndex) && reader.ReadFixedString64(out UserName);
    }
}
";
        Assert.AreEqual(expectedOutput, output);
    }

    [TestMethod]
    public void OnlyMarkDirtyFields()
    {
        string source = @"
using Plugins.basegame.Events;
using DOTSNET;

[Plugins.basegame.Events.CodeGenNetComponentAttribute(DOTSNET.SyncDirection.SERVER_TO_CLIENT)]
public partial struct Position3Data
{
    [MarkDirty] public int HatIndex;
    [MarkDirty] public int BodyIndex;
    [MarkDirty] public Unity.Collections.FixedString64Bytes UserName;
}
";
        var generator = new Generator();
        generator.DisableAllGeneration();
        generator.EnableEventDataGeneration = true;
        var diagnostics = this.GetDiagnosticsFromGenerator(source, generator, NullableContextOptions.Disable);

        Diagnostic? value = diagnostics.FirstOrDefault();
        Assert.IsNotNull(value);
        Assert.AreEqual("LT0002", value.Id);
        Assert.AreEqual("(5,1): error LT0002: Type Position3Data does not have any field marked with SyncFieldAttribute", value.ToString());
    }

    [TestMethod]
    public void UnknownTypeReported()
    {
        string source = @"
using Plugins.basegame.Events;
using DOTSNET;

[Plugins.basegame.Events.CodeGenNetComponentAttribute(DOTSNET.SyncDirection.SERVER_TO_CLIENT)]
public partial struct Position3Data
{
    [MarkDirty] [SyncField] public string HatIndex;
    [MarkDirty] [SyncField] public int BodyIndex;
    [SyncField] public Unity.Collections.FixedString64Bytes UserName;
}
";
        var generator = new Generator();
        generator.DisableAllGeneration();
        generator.EnableEventDataGeneration = true;
        var diagnostics = this.GetDiagnosticsFromGenerator(source, generator, NullableContextOptions.Disable);

        Diagnostic? value = diagnostics.FirstOrDefault();
        Assert.IsNotNull(value);
        Assert.AreEqual("LT0001", value.Id);
        Assert.AreEqual("(5,1): error LT0001: Cannot convert field type String to dotsnet read/write methods", value.ToString());
    }
}
