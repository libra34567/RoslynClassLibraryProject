using Microsoft.CodeAnalysis;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LittleToyDocumentor.Tests;

[TestClass]
public class GenerateDoc: CodeGenerationTestBase
{
    [TestMethod]
    public void FindingCandidates()
    {
        string source = @"
public partial class Position3Data
{
    protected override void OnUpdate()
    {
        //4. Alternatively, we can call EntityManager.AddComponent inside a Entities.ForEach, which runs every frame.
        Entities.WithNone<SampleComponentData>().ForEach((Entity entity) =>
        {
            EntityManager.AddComponent<SampleComponentData>(entity);
        }).WithStructuralChanges().Run();
    }
}
";
        var generator = new Generator();
        string output = this.GetGeneratedOutput(source, generator, NullableContextOptions.Disable);

        Assert.IsNotNull(output);

        var expectedOutput = @"// <auto-generated>
// Code generated by LittleToy Documentation Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>
#nullable enable
#pragma warning disable 1591
using System;
using Unity.Entities;
using Unity.Mathematics;
using Plugins.basegame.Events;
using DOTSNET;
using Unity.Collections;

// Found 1 candidates
public partial class DocumentationClass
{
}
";
        Assert.AreEqual(expectedOutput, output);
    }
}
